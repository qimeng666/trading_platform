{"ast":null,"code":"define([\"../core\", \"../var/isFunction\", \"./var/nonce\", \"./var/rquery\", \"../ajax\"], function (jQuery, isFunction, nonce, rquery) {\n  \"use strict\";\n\n  var oldCallbacks = [],\n      rjsonp = /(=)\\?(?=&|$)|\\?\\?/; // Default jsonp settings\n\n  jQuery.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function () {\n      var callback = oldCallbacks.pop() || jQuery.expando + \"_\" + nonce.guid++;\n      this[callback] = true;\n      return callback;\n    }\n  }); // Detect, normalize options and install callbacks for jsonp requests\n\n  jQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n    var callbackName,\n        overwritten,\n        responseContainer,\n        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0 && rjsonp.test(s.data) && \"data\"); // Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\n    if (jsonProp || s.dataTypes[0] === \"jsonp\") {\n      // Get callback name, remembering preexisting value associated with it\n      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data\n\n      if (jsonProp) {\n        s[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\n      } else if (s.jsonp !== false) {\n        s.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n      } // Use data converter to retrieve json after script execution\n\n\n      s.converters[\"script json\"] = function () {\n        if (!responseContainer) {\n          jQuery.error(callbackName + \" was not called\");\n        }\n\n        return responseContainer[0];\n      }; // Force json dataType\n\n\n      s.dataTypes[0] = \"json\"; // Install callback\n\n      overwritten = window[callbackName];\n\n      window[callbackName] = function () {\n        responseContainer = arguments;\n      }; // Clean-up function (fires after converters)\n\n\n      jqXHR.always(function () {\n        // If previous value didn't exist - remove it\n        if (overwritten === undefined) {\n          jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value\n        } else {\n          window[callbackName] = overwritten;\n        } // Save back as free\n\n\n        if (s[callbackName]) {\n          // Make sure that re-using the options doesn't screw things around\n          s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use\n\n          oldCallbacks.push(callbackName);\n        } // Call if it was a function and we have a response\n\n\n        if (responseContainer && isFunction(overwritten)) {\n          overwritten(responseContainer[0]);\n        }\n\n        responseContainer = overwritten = undefined;\n      }); // Delegate to script\n\n      return \"script\";\n    }\n  });\n});","map":{"version":3,"names":["define","jQuery","isFunction","nonce","rquery","oldCallbacks","rjsonp","ajaxSetup","jsonp","jsonpCallback","callback","pop","expando","guid","ajaxPrefilter","s","originalSettings","jqXHR","callbackName","overwritten","responseContainer","jsonProp","test","url","data","contentType","indexOf","dataTypes","replace","converters","error","window","arguments","always","undefined","removeProp","push"],"sources":["C:/Users/qimeng/Downloads/Online-Store-main (1)/Online-Store-main/node_modules/jquery/src/ajax/jsonp.js"],"sourcesContent":["define( [\n\t\"../core\",\n\t\"../var/isFunction\",\n\t\"./var/nonce\",\n\t\"./var/rquery\",\n\t\"../ajax\"\n], function( jQuery, isFunction, nonce, rquery ) {\n\n\"use strict\";\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n} );\n"],"mappings":"AAAAA,MAAM,CAAE,CACP,SADO,EAEP,mBAFO,EAGP,aAHO,EAIP,cAJO,EAKP,SALO,CAAF,EAMH,UAAUC,MAAV,EAAkBC,UAAlB,EAA8BC,KAA9B,EAAqCC,MAArC,EAA8C;EAEjD;;EAEA,IAAIC,YAAY,GAAG,EAAnB;EAAA,IACCC,MAAM,GAAG,mBADV,CAJiD,CAOjD;;EACAL,MAAM,CAACM,SAAP,CAAkB;IACjBC,KAAK,EAAE,UADU;IAEjBC,aAAa,EAAE,YAAW;MACzB,IAAIC,QAAQ,GAAGL,YAAY,CAACM,GAAb,MAAwBV,MAAM,CAACW,OAAP,GAAiB,GAAjB,GAAyBT,KAAK,CAACU,IAAN,EAAhE;MACA,KAAMH,QAAN,IAAmB,IAAnB;MACA,OAAOA,QAAP;IACA;EANgB,CAAlB,EARiD,CAiBjD;;EACAT,MAAM,CAACa,aAAP,CAAsB,YAAtB,EAAoC,UAAUC,CAAV,EAAaC,gBAAb,EAA+BC,KAA/B,EAAuC;IAE1E,IAAIC,YAAJ;IAAA,IAAkBC,WAAlB;IAAA,IAA+BC,iBAA/B;IAAA,IACCC,QAAQ,GAAGN,CAAC,CAACP,KAAF,KAAY,KAAZ,KAAuBF,MAAM,CAACgB,IAAP,CAAaP,CAAC,CAACQ,GAAf,IACjC,KADiC,GAEjC,OAAOR,CAAC,CAACS,IAAT,KAAkB,QAAlB,IACC,CAAET,CAAC,CAACU,WAAF,IAAiB,EAAnB,EACEC,OADF,CACW,mCADX,MACqD,CAFtD,IAGCpB,MAAM,CAACgB,IAAP,CAAaP,CAAC,CAACS,IAAf,CAHD,IAG0B,MALhB,CADZ,CAF0E,CAW1E;;IACA,IAAKH,QAAQ,IAAIN,CAAC,CAACY,SAAF,CAAa,CAAb,MAAqB,OAAtC,EAAgD;MAE/C;MACAT,YAAY,GAAGH,CAAC,CAACN,aAAF,GAAkBP,UAAU,CAAEa,CAAC,CAACN,aAAJ,CAAV,GAChCM,CAAC,CAACN,aAAF,EADgC,GAEhCM,CAAC,CAACN,aAFH,CAH+C,CAO/C;;MACA,IAAKY,QAAL,EAAgB;QACfN,CAAC,CAAEM,QAAF,CAAD,GAAgBN,CAAC,CAAEM,QAAF,CAAD,CAAcO,OAAd,CAAuBtB,MAAvB,EAA+B,OAAOY,YAAtC,CAAhB;MACA,CAFD,MAEO,IAAKH,CAAC,CAACP,KAAF,KAAY,KAAjB,EAAyB;QAC/BO,CAAC,CAACQ,GAAF,IAAS,CAAEnB,MAAM,CAACkB,IAAP,CAAaP,CAAC,CAACQ,GAAf,IAAuB,GAAvB,GAA6B,GAA/B,IAAuCR,CAAC,CAACP,KAAzC,GAAiD,GAAjD,GAAuDU,YAAhE;MACA,CAZ8C,CAc/C;;;MACAH,CAAC,CAACc,UAAF,CAAc,aAAd,IAAgC,YAAW;QAC1C,IAAK,CAACT,iBAAN,EAA0B;UACzBnB,MAAM,CAAC6B,KAAP,CAAcZ,YAAY,GAAG,iBAA7B;QACA;;QACD,OAAOE,iBAAiB,CAAE,CAAF,CAAxB;MACA,CALD,CAf+C,CAsB/C;;;MACAL,CAAC,CAACY,SAAF,CAAa,CAAb,IAAmB,MAAnB,CAvB+C,CAyB/C;;MACAR,WAAW,GAAGY,MAAM,CAAEb,YAAF,CAApB;;MACAa,MAAM,CAAEb,YAAF,CAAN,GAAyB,YAAW;QACnCE,iBAAiB,GAAGY,SAApB;MACA,CAFD,CA3B+C,CA+B/C;;;MACAf,KAAK,CAACgB,MAAN,CAAc,YAAW;QAExB;QACA,IAAKd,WAAW,KAAKe,SAArB,EAAiC;UAChCjC,MAAM,CAAE8B,MAAF,CAAN,CAAiBI,UAAjB,CAA6BjB,YAA7B,EADgC,CAGjC;QACC,CAJD,MAIO;UACNa,MAAM,CAAEb,YAAF,CAAN,GAAyBC,WAAzB;QACA,CATuB,CAWxB;;;QACA,IAAKJ,CAAC,CAAEG,YAAF,CAAN,EAAyB;UAExB;UACAH,CAAC,CAACN,aAAF,GAAkBO,gBAAgB,CAACP,aAAnC,CAHwB,CAKxB;;UACAJ,YAAY,CAAC+B,IAAb,CAAmBlB,YAAnB;QACA,CAnBuB,CAqBxB;;;QACA,IAAKE,iBAAiB,IAAIlB,UAAU,CAAEiB,WAAF,CAApC,EAAsD;UACrDA,WAAW,CAAEC,iBAAiB,CAAE,CAAF,CAAnB,CAAX;QACA;;QAEDA,iBAAiB,GAAGD,WAAW,GAAGe,SAAlC;MACA,CA3BD,EAhC+C,CA6D/C;;MACA,OAAO,QAAP;IACA;EACD,CA5ED;AA8EC,CAtGK,CAAN"},"metadata":{},"sourceType":"script"}